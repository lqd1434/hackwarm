{"remainingRequest":"/Users/lqd/WebstormProjects/warm/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/lqd/WebstormProjects/warm/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lqd/WebstormProjects/warm/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lqd/WebstormProjects/warm/src/views/auth/LoginAndRegister.vue?vue&type=template&id=423f8324&scoped=true&","dependencies":[{"path":"/Users/lqd/WebstormProjects/warm/src/views/auth/LoginAndRegister.vue","mtime":1618659842433},{"path":"/Users/lqd/WebstormProjects/warm/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lqd/WebstormProjects/warm/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lqd/WebstormProjects/warm/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lqd/WebstormProjects/warm/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}